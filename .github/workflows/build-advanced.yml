name: STM32 Build and Test

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  schedule:
    # Run weekly build check on Sundays at 6:00 AM UTC
    - cron: '0 6 * * 0'

env:
  BUILD_TYPE: Release

jobs:
  # Check if we should skip the build for documentation-only changes
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should_skip }}
    steps:
      - id: skip-check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**.md", "**.txt", "docs/**", "LICENSE", ".gitignore"]'
          do_not_skip: '["schedule", "workflow_dispatch"]'

  build:
    needs: check-changes
    if: needs.check-changes.outputs.should-skip != 'true'
    runs-on: ubuntu-latest
    container:
      image: dsavvari/stm32-dev:latest
      options: --user root

    outputs:
      build-status: ${{ steps.build-status.outputs.status }}
      binary-sizes: ${{ steps.sizes.outputs.sizes }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # Fetch full history for better commit info

    - name: Verify toolchain
      run: |
        which arm-none-eabi-gcc
        arm-none-eabi-gcc --version
        which cmake
        cmake --version

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: repos/
        key: stm32-deps-${{ hashFiles('thirdparty.sh') }}
        restore-keys: |
          stm32-deps-

    - name: Setup third-party dependencies
      run: |
        chmod +x ./thirdparty.sh
        ./thirdparty.sh

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
                 -DCMAKE_TOOLCHAIN_FILE=../repos/stm32-cmake/cmake/stm32_gcc.cmake \
                 -DSTM32_CHIP=STM32L4S5VI

    - name: Build all projects
      id: build
      run: |
        cd build
        cmake --build . --parallel $(nproc) 2>&1 | tee build.log
        echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
      continue-on-error: true

    - name: Set build status
      id: build-status
      run: |
        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Collect binary information
      id: sizes
      if: env.BUILD_SUCCESS == 'true'
      run: |
        sizes_json="["
        first="true"
        for project in bareMetalBlink bareMetalPWM cortexSysTick cortexExceptions cortexPowerModes cortexMemoryMap cortexSystemControl cortexDebugTrace; do
          if [ -f "build/${project}/stm32l4-${project}.elf" ]; then
            if [ "$first" = "false" ]; then
              sizes_json="${sizes_json},"
            fi
            size_output=$(arm-none-eabi-size "build/${project}/stm32l4-${project}.elf" | tail -n 1)
            text=$(echo $size_output | awk '{print $1}')
            data=$(echo $size_output | awk '{print $2}')
            bss=$(echo $size_output | awk '{print $3}')
            dec=$(echo $size_output | awk '{print $4}')
            hex=$(echo $size_output | awk '{print $5}')
            sizes_json="${sizes_json}{\"project\":\"${project}\",\"text\":${text},\"data\":${data},\"bss\":${bss},\"total\":${dec},\"hex\":\"${hex}\"}"
            first="false"
          fi
        done
        sizes_json="${sizes_json}]"
        echo "sizes=${sizes_json}" >> $GITHUB_OUTPUT

    - name: Generate build summary
      run: |
        echo "# STM32 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** \`$BUILD_TYPE\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "## ‚úÖ Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Binary Sizes" >> $GITHUB_STEP_SUMMARY
          echo "| Project | Text (bytes) | Data (bytes) | BSS (bytes) | Total (bytes) | Total (hex) |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------------|--------------|-------------|---------------|-------------|" >> $GITHUB_STEP_SUMMARY

          for project in bareMetalBlink bareMetalPWM cortexSysTick cortexExceptions cortexPowerModes cortexMemoryMap cortexSystemControl cortexDebugTrace; do
            if [ -f "build/${project}/stm32l4-${project}.elf" ]; then
              size_output=$(arm-none-eabi-size "build/${project}/stm32l4-${project}.elf" | tail -n 1)
              text=$(echo $size_output | awk '{print $1}')
              data=$(echo $size_output | awk '{print $2}')
              bss=$(echo $size_output | awk '{print $3}')
              dec=$(echo $size_output | awk '{print $4}')
              hex=$(echo $size_output | awk '{print $5}')
              echo "| $project | $text | $data | $bss | $dec | $hex |" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "## ‚ùå Build Status: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the build logs above for detailed error information." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload build artifacts
      if: env.BUILD_SUCCESS == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: stm32-binaries-${{ github.sha }}
        path: |
          build/*/stm32l4-*.elf
          build/*/stm32l4-*.bin
          build/*/stm32l4-*.hex
        retention-days: 30

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.sha }}
        path: build/build.log
        retention-days: 7

    # Immediate notifications (no separate job needed)
    - name: Create GitHub issue on failure (Master branch only)
      if: failure() && github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues" \
          -d '{
            "title": "üö® Build Failed on Master Branch - ${{ github.sha }}",
            "body": "**Build Failed** ‚ùå\n\n**Details:**\n- Commit: ${{ github.sha }}\n- Branch: ${{ github.ref_name }}\n- Workflow: ${{ github.workflow }}\n- Run: ${{ github.run_id }}\n\n**Commit Message:**\n${{ github.event.head_commit.message }}\n\n**Action Required:**\nPlease check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details and fix the build issues.\n\n---\n*This issue was automatically created by the CI system.*",
            "labels": ["bug", "build-failure", "ci", "urgent"]
          }'

    - name: Add PR comment on failure
      if: failure() && github.event_name == 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments" \
          -d '{
            "body": "üö® **Build Failed** ‚ùå\n\nThe STM32 build failed for this PR. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) and fix the issues before merging.\n\n*This comment was automatically generated by the CI system.*"
          }'
