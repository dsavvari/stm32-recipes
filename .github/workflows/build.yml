name: STM32 Build and Test

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up ARM GNU Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '12.2.Rel1'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential git

    - name: Verify toolchain installation
      run: |
        arm-none-eabi-gcc --version
        arm-none-eabi-size --version
        cmake --version

    - name: Setup third-party dependencies
      run: |
        chmod +x ./thirdparty.sh
        ./thirdparty.sh

    - name: List dependencies
      run: |
        ls -la repos/
        ls -la repos/stm32-cmake/

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DSTM32_CHIP=STM32L4S5VI

    - name: Build all projects
      run: |
        cd build
        cmake --build . --parallel $(nproc)

    - name: Display binary sizes
      run: |
        echo "## Binary Sizes" >> $GITHUB_STEP_SUMMARY
        echo "| Project | Text | Data | BSS | Total | Hex |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|------|-----|-------|-----|" >> $GITHUB_STEP_SUMMARY

        for project in bareMetalBlink bareMetalPWM bareMetalSysTick; do
          if [ -f "build/${project}/stm32l4-${project}.elf" ]; then
            echo "Processing $project..."
            size_output=$(arm-none-eabi-size "build/${project}/stm32l4-${project}.elf" | tail -n 1)
            text=$(echo $size_output | awk '{print $1}')
            data=$(echo $size_output | awk '{print $2}')
            bss=$(echo $size_output | awk '{print $3}')
            dec=$(echo $size_output | awk '{print $4}')
            hex=$(echo $size_output | awk '{print $5}')
            echo "| $project | $text | $data | $bss | $dec | $hex |" >> $GITHUB_STEP_SUMMARY
            echo "$project: text=$text, data=$data, bss=$bss, total=$dec"
          else
            echo "‚ö†Ô∏è Binary not found for $project"
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stm32-binaries
        path: |
          build/*/stm32l4-*.elf
          build/*/stm32l4-*.bin
          build/*/stm32l4-*.hex
        retention-days: 30
      if: always()  # Upload artifacts even if some steps fail

    - name: Check for build failures
      if: failure()
      run: |
        echo "‚ùå Build failed! Check the logs above for details."
        echo "## Build Failed" >> $GITHUB_STEP_SUMMARY
        echo "The STM32 build process encountered an error. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        exit 1

  notify:
    runs-on: ubuntu-latest
    needs: build
    if: failure()

    steps:
    - name: Notify on failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "‚ùå STM32 build failed on commit ${{ github.sha }}"
        echo "Check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    - name: Send email notification on failure
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "üö® STM32 Build Failed - ${{ github.repository }}"
        body: |
          Build failed for commit ${{ github.sha }}

          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}

          Check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: your-email@example.com
        from: STM32 Build Bot

    - name: Create GitHub issue on failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues" \
          -d '{
            "title": "üö® Build Failed on Master Branch",
            "body": "The STM32 build failed on commit ${{ github.sha }}.\n\nCommit message: ${{ github.event.head_commit.message }}\n\nCheck the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.",
            "labels": ["bug", "build-failure", "ci"]
          }'
