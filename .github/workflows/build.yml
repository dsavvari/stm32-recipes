name: STM32 Build and Test

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up ARM GNU Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '12.2.Rel1'
    
    - name: Install CMake
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Setup third-party dependencies
      run: |
        chmod +x ./thirdparty.sh
        ./thirdparty.sh
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../repos/stm32-cmake/cmake/stm32_gcc.cmake
    
    - name: Build all projects
      run: |
        cd build
        cmake --build . --parallel $(nproc)
    
    - name: Display binary sizes
      run: |
        echo "## Binary Sizes" >> $GITHUB_STEP_SUMMARY
        echo "| Project | Text | Data | BSS | Total | Hex |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|------|-----|-------|-----|" >> $GITHUB_STEP_SUMMARY
        
        for project in bareMetalBlink bareMetalPWM bareMetalSysTick; do
          if [ -f "build/${project}/stm32l4-${project}.elf" ]; then
            size_output=$(arm-none-eabi-size "build/${project}/stm32l4-${project}.elf" | tail -n 1)
            text=$(echo $size_output | awk '{print $1}')
            data=$(echo $size_output | awk '{print $2}')
            bss=$(echo $size_output | awk '{print $3}')
            dec=$(echo $size_output | awk '{print $4}')
            hex=$(echo $size_output | awk '{print $5}')
            echo "| $project | $text | $data | $bss | $dec | $hex |" >> $GITHUB_STEP_SUMMARY
          fi
        done
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stm32-binaries
        path: |
          build/*/stm32l4-*.elf
          build/*/stm32l4-*.bin
          build/*/stm32l4-*.hex
        retention-days: 30
    
    - name: Check for build failures
      if: failure()
      run: |
        echo "Build failed! Check the logs above for details."
        exit 1

  notify:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build.result == 'success'
      run: |
        echo "✅ STM32 build completed successfully!"
        
    - name: Notify on failure
      if: needs.build.result == 'failure'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "❌ STM32 build failed!"
        # Create an issue on build failure (optional)
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/master" ]; then
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues" \
            -d '{
              "title": "Build Failed on Master Branch",
              "body": "The STM32 build failed on commit ${{ github.sha }}.\n\nPlease check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.",
              "labels": ["bug", "build-failure"]
            }'
        fi
