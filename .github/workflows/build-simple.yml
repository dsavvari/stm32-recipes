name: STM32 Simple Build

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up ARM GNU Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '12.2.Rel1'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential git

    - name: Setup third-party dependencies
      run: |
        chmod +x ./thirdparty.sh
        ./thirdparty.sh

    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DSTM32_CHIP=STM32L4S5VI

    - name: Build all projects
      run: |
        cd build
        cmake --build . --parallel $(nproc)

    - name: Display binary sizes
      run: |
        echo "## ‚úÖ Build Successful - Binary Sizes" >> $GITHUB_STEP_SUMMARY
        echo "| Project | Text | Data | BSS | Total | Hex |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|------|-----|-------|-----|" >> $GITHUB_STEP_SUMMARY

        for project in bareMetalBlink bareMetalPWM bareMetalSysTick; do
          if [ -f "build/${project}/stm32l4-${project}.elf" ]; then
            size_output=$(arm-none-eabi-size "build/${project}/stm32l4-${project}.elf" | tail -n 1)
            text=$(echo $size_output | awk '{print $1}')
            data=$(echo $size_output | awk '{print $2}')
            bss=$(echo $size_output | awk '{print $3}')
            dec=$(echo $size_output | awk '{print $4}')
            hex=$(echo $size_output | awk '{print $5}')
            echo "| $project | $text | $data | $bss | $dec | $hex |" >> $GITHUB_STEP_SUMMARY
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stm32-binaries
        path: |
          build/*/stm32l4-*.elf
          build/*/stm32l4-*.bin
          build/*/stm32l4-*.hex
        retention-days: 30
      if: always()

    # Notification methods (pick one or combine)
    - name: Create GitHub issue on failure (Master branch only)
      if: failure() && github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues" \
          -d '{
            "title": "üö® Build Failed on Master Branch - ${{ github.sha }}",
            "body": "**Build Failed** ‚ùå\n\n**Details:**\n- Commit: ${{ github.sha }}\n- Branch: ${{ github.ref_name }}\n- Workflow: ${{ github.workflow }}\n- Run: ${{ github.run_id }}\n\n**Commit Message:**\n${{ github.event.head_commit.message }}\n\n**Action Required:**\nPlease check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details and fix the build issues.\n\n---\n*This issue was automatically created by the CI system.*",
            "labels": ["bug", "build-failure", "ci", "urgent"]
          }'

    - name: Add PR comment on failure
      if: failure() && github.event_name == 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments" \
          -d '{
            "body": "üö® **Build Failed** ‚ùå\n\nThe STM32 build failed for this PR. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) and fix the issues before merging.\n\n*This comment was automatically generated by the CI system.*"
          }'
